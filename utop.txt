open Magic_tree_fitter.Core_algo;;
open Magic_tree_fitter.Domain_types;;
open Magic_tree_fitter.Grammar_reader;;
open Magic_tree_fitter.Symbol_table;;
open Magic_tree_fitter.Parse_table_constructor;;
open Magic_tree_fitter.Grammar_reader_utils;;
open Magic_tree_fitter.Dump;;
open Magic_tree_fitter.Gss;;
open Magic_tree_fitter.Graph;;
open Magic_tree_fitter.Stack;;
open Magic_tree_fitter.Graph_monad_ops;;
open Magic_tree_fitter.Stack_monad_ops;;
open Magic_tree_fitter.Stack_ops;;

open Yojson.Basic.Util;;

let parse_tables = "grammars/lisp.g4" |> extract_grammar |> create_parse_tables;;
let config, initial_graph = setup_glr parse_tables;;
let c,g = run_glr initialise_stacks config initial_graph;;


let print_stack_top stack =
  Printf.printf "\nStack.top (%d nodes):\n" (NodeMap.cardinal stack.top);
  NodeMap.iter (fun _ node ->
    let (NodeId node_id) = node.id in
    let (NodeState node_state) = node.state in
    Printf.printf "  Node[id=%d, state=%d]\n" node_id node_state;
    Printf.printf "    edges: [%s]\n" 
      (String.concat "; " 
        (List.map (fun (symbol, target_state) -> 
          let (NodeState state_val) = target_state in
          Printf.sprintf "%s -> %d" (string_of_symbol symbol) state_val) (EdgeSet.elements node.edges)));
    Printf.printf "    parents: {%s}\n" 
      (String.concat ", " 
        (List.map (fun parent_id -> 
          let (NodeId id_val) = parent_id in 
          string_of_int id_val) (NodeIdSet.elements node.parents)));
    Printf.printf "    next_actions: [%s]\n" 
      (String.concat "; " 
        (List.map string_of_action node.next_actions));
    Printf.printf "    blocked_reductions: [%s]\n" 
      (String.concat "; " 
        (List.map (fun r -> Printf.sprintf "%sâ†’%s" (string_of_symbol r.lhs) (string_of_production r.rhs)) node.blocked_reductions));
    Printf.printf "\n"
  ) stack.top;
  Printf.printf "------\n%!"

(*

    let updated_stacks =
      List.map (update_stack c) g.stacks
      |> List.filter (fun s -> not (NodeMap.is_empty s.top))
*)
let final_graph = run_glr construct_ast () c g |> fst

final_graph.stacks |> fun s -> List.nth s 0 ;;
final_graph.stacks |> fun s -> List.nth s 0 |> print_stack_top ;;
final_graph.stacks |> fun s -> List.nth s 0 |> fun s -> dump_edgeset_verbose s.root.edges;;
